tab_classica_1 <- faz_tab_classica(mod, length(beta))
#| label: tbl-bayes_classica_1
#| tbl-cap: "Resultados da tarefa 2"
#| tbl-subcap:
#|   - "(a) Bayes n = 200"
#|   - "(b) Frequentista n = 200"
#| layout-ncol: 2
library(knitr)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
kbl(tab_classica_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
#| label: fig-plot_bayes_classica_1
#| fig-cap: "Gráfico da tarefa 2"
#| fig-subcap:
#|   - " Bayes n = 200"
#|   - " Frequentista n = 1000"
#| layout-ncol: 2
segs3 <- calcula_segs_classica(tab_classica_1)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs3, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
#| label: fig-plot_bayes2
#| fig-cap: "Gráfico da tarefa 3"
#| fig-subcap:
#|   - " Bayes n = 200 prob(X2 = 1) = 0.5"
#|   - " Bayes n = 200 prob(X2 = 1) = 0.1"
#| layout-ncol: 2
segs4 <- calcula_segs_bayes(tab_bayes_3)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs4, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
set.seed(1)
dados_probit <- gera_dados_probit(200, q, beta)
output_probt <- gera_bayes_probit(200)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
#| label: cadeia_4
#| layout-nrow: 3
#| layout-ncol: 3
{ plot( samp_probit$beta[,1], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = 'Traceplot de beta0', col = 'blue')
abline( h = real$beta[1], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,2], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta1',
main = 'Traceplot de beta1', col = 'blue')
abline( h = real$beta[2], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,3], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta2',
main = 'Traceplot de beta2', col = 'blue')
abline( h = real$beta[3], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,4], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta3',
main = 'Traceplot de beta3', col = 'blue')
abline( h = real$beta[4], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,5], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta4',
main = 'Traceplot de beta4', col = 'blue')
abline( h = real$beta[5], lwd = 5, col = 'red') }
#| label: fig-plot_bayes3
#| fig-cap: "Gráfico da tarefa 4"
#| fig-subcap:
#|   - " Bayes n = 200 logit"
#|   - " Bayes n = 200 probit"
#| layout-ncol: 2
segs5 <- calcula_segs_bayes(tab_bayes_probit)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs5, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
samp[[1]]
samp[[3]]
set.seed(1)
dados_probit <- gera_dados_probit(1000, q, beta)
output_probt <- gera_bayes_probit(1000)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
dados_probit
#set.seed(1)
dados_probit <- gera_dados_probit(1000, q, beta)
output_probt <- gera_bayes_probit(1000)
samp_probit <- extract(output_probt)
#set.seed(1)
dados_probit <- gera_dados_probit(200, q, beta)
output_probt <- gera_bayes_probit(200)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
#set.seed(1)
dados_probit <- gera_dados_probit(1000, q, beta)
output_probt <- gera_bayes_probit(1000)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
#set.seed(1)
dados_probit <- gera_dados_probit(200, q, beta)
output_probt <- gera_bayes_probit(200)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
set.seed(1)
dados_probit <- gera_dados_probit(200, q, beta)
output_probt <- gera_bayes_probit(200)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
getwd()
library(rstan)
library(coda)
library(purrr)
library(kableExtra)
library(plotrix)
rm(list=ls(all=TRUE))
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
set.seed(1)
# Declaração de funções
set.seed(1)
faz_tab_bayes <- function(samp, real, q){
# recebe um objeto do tipo samp
# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de betas
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
faz_tab_classica <- function(mod, q){
# mod é um glm
# q é o tamanho do vetor de betas
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
res <- round(tab_classica, 4)
return(res)
}
gera_bayes <- function(n, prob_X2){
#n <- 200
beta <- c(1.5, 0.5, -0.5, 1.0, -1.0)
q <- length(beta)
real <- list(beta)
names(real) <- c('beta')
x <- array(1, c(n, q))
x[,2] <- rbinom(n, 1, prob_X2)
for(i in 3:q){x[,i] <- runif(n, -1, 1)}
eta <- x %*% as.matrix(beta) |> as.vector()
theta <- exp(eta) / (1 + exp(eta))
y <- numeric(n)
for(i in 1:n){y[i] <- rbinom(1, 1, theta[i])}
m_beta <- rep(0, q)
s_beta <- 10*diag(q)
data <- list(
n = n,
q = q,
y = y,
x = x,
m_beta = m_beta,
s_beta = s_beta
)
pars <- c("beta")
# Lista de sementes de inicialização (2 cadeias):
init = list()
init[[1]] <- list(beta=rep(0,q))
init[[2]] <- list(beta=runif(q,-1,1))
iter = 2000
warmup = 1000
chains = 2
out <- stan(file = "./Stan/Reglogit.stan", data = data,
iter = iter, warmup = warmup, chains = chains,
pars = pars, init = init, verbose = FALSE)
return(out)
}
gera_bayes_probit <- function(n){
#n <- 200
beta <- c(1.5, 0.5, -0.5, 1.0, -1.0)
q <- length(beta)
real <- list(beta)
names(real) <- c('beta')
x <- array(1, c(n, q))
x[,2] <- rbinom(n, 1, 0.5)
for(i in 3:q){x[,i] <- runif(n, -1, 1)}
eta <- x %*% as.matrix(beta) |> as.vector()
theta <- pnorm(eta)
y <- numeric(n)
for(i in 1:n){y[i] <- rbinom(1, 1, theta[i])}
m_beta <- rep(0, q)
s_beta <- 10*diag(q)
data <- list(
n = n,
q = q,
y = y,
x = x,
m_beta = m_beta,
s_beta = s_beta
)
pars <- c("beta")
# Lista de sementes de inicialização (2 cadeias):
init = list()
init[[1]] <- list(beta=rep(0,q))
init[[2]] <- list(beta=runif(q,-1,1))
iter = 2000
warmup = 1000
chains = 2
out <- stan(file = "./Stan/Regprobit.stan", data = data,
iter = iter, warmup = warmup, chains = chains,
pars = pars, init = init, verbose = FALSE)
return(out)
}
calcula_segs_bayes <- function(tabela){
# Calcula a matrix para ser criado o centipede.plot do plotrix
# a primeira linha é a média
# a segunda linha é o limite inferior
# a terceira linha é o limite superior
medias <- tabela[,2]
lower_limit <- tabela[,5]
upper_limit <- tabela[,6]
segs <- matrix(c(medias, lower_limit, upper_limit), byrow=T, nrow=3, ncol=5)
return(segs)
}
calcula_segs_classica <- function(tabela){
z <- abs(qnorm(0.025))
pontual_estimation <- tabela[,1]
std_error <- tabela[,2]
lower_limit <- pontual_estimation- z*std_error
upper_limit <- pontual_estimation + z*std_error
segs <- segs <- matrix(c(pontual_estimation, lower_limit, upper_limit), byrow=T, nrow=3, ncol=5)
return(segs)
}
gera_dados <- function(n, prob_X2, q, beta){
x <- array(1, c(n, q))
x[,2] <- rbinom(n, 1, prob_X2)
for(i in 3:q){x[,i] <- runif(n, -1, 1)}
eta <- x %*% as.matrix(beta) |> as.vector()
theta <- exp(eta) / (1 + exp(eta))
y <- numeric(n)
for(i in 1:n){y[i] <- rbinom(1, 1, theta[i])}
res <- data.frame(
x = x,
y = y,
eta = eta,
theta = theta
)
return(res)
}
gera_dados_probit <- function(n, q, beta){
x <- array(1, c(n, q))
x[,2] <- rbinom(n, 1, 0.5)
for(i in 3:q){x[,i] <- runif(n, -1, 1)}
eta <- x %*% as.matrix(beta) |> as.vector()
theta <- pnorm(eta)
y <- numeric(n)
for(i in 1:n){y[i] <- rbinom(1, 1, theta[i])}
res <- data.frame(
x = x,
y = y,
eta = eta,
theta = theta
)
return(res)
}
n <- list(200, 200, 1000)
prob_X2 <- list(0.5, 0.1, 0.5)
beta <- c(1.5, 0.5, -0.5, 1.0, -1.0)
q <- length(beta)
real <- list(beta)
names(real) <- c('beta')
output <- map2(n, prob_X2, gera_bayes)
samp <- vector(mode = "list", length = 3)
for(i in seq_along(samp)){samp[[i]] <- extract(output[[i]])}
#| label: cadeia_1
#| layout-nrow: 3
#| layout-ncol: 3
{ plot( samp[[1]]$beta[,1], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = 'Traceplot de beta0', col = 'blue')
abline( h = real$beta[1], lwd = 5, col = 'red') }
{ plot( samp[[1]]$beta[,2], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta1',
main = 'Traceplot de beta1', col = 'blue')
abline( h = real$beta[2], lwd = 5, col = 'red') }
{ plot( samp[[1]]$beta[,3], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta2',
main = 'Traceplot de beta2', col = 'blue')
abline( h = real$beta[3], lwd = 5, col = 'red') }
{ plot( samp[[1]]$beta[,4], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta3',
main = 'Traceplot de beta3', col = 'blue')
abline( h = real$beta[4], lwd = 5, col = 'red') }
{ plot( samp[[1]]$beta[,5], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta4',
main = 'Traceplot de beta4', col = 'blue')
abline( h = real$beta[5], lwd = 5, col = 'red') }
#| label: cadeia_2
#| layout-nrow: 3
#| layout-ncol: 3
{ plot( samp[[2]]$beta[,1], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = 'Traceplot de beta0', col = 'blue')
abline( h = real$beta[1], lwd = 5, col = 'red') }
{ plot( samp[[2]]$beta[,2], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta1',
main = 'Traceplot de beta1', col = 'blue')
abline( h = real$beta[2], lwd = 5, col = 'red') }
{ plot( samp[[2]]$beta[,3], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta2',
main = 'Traceplot de beta2', col = 'blue')
abline( h = real$beta[3], lwd = 5, col = 'red') }
{ plot( samp[[2]]$beta[,4], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta3',
main = 'Traceplot de beta3', col = 'blue')
abline( h = real$beta[4], lwd = 5, col = 'red') }
{ plot( samp[[2]]$beta[,5], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta4',
main = 'Traceplot de beta4', col = 'blue')
abline( h = real$beta[5], lwd = 5, col = 'red') }
#| label: cadeia_3
#| layout-nrow: 3
#| layout-ncol: 3
{ plot( samp[[3]]$beta[,1], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = 'Traceplot de beta0', col = 'blue')
abline( h = real$beta[1], lwd = 5, col = 'red') }
{ plot( samp[[3]]$beta[,2], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta1',
main = 'Traceplot de beta1', col = 'blue')
abline( h = real$beta[2], lwd = 5, col = 'red') }
{ plot( samp[[3]]$beta[,3], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta2',
main = 'Traceplot de beta2', col = 'blue')
abline( h = real$beta[3], lwd = 5, col = 'red') }
{ plot( samp[[3]]$beta[,4], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta3',
main = 'Traceplot de beta3', col = 'blue')
abline( h = real$beta[4], lwd = 5, col = 'red') }
{ plot( samp[[3]]$beta[,5], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta4',
main = 'Traceplot de beta4', col = 'blue')
abline( h = real$beta[5], lwd = 5, col = 'red') }
tab_bayes_1 <- faz_tab_bayes(samp[[1]], real, length(beta))
tab_bayes_2 <- faz_tab_bayes(samp[[3]], real, length(beta))
tab_bayes_3 <- faz_tab_bayes(samp[[2]], real, length(beta))
#| label: tbl-bayes_1
#| tbl-cap: "Resultados da tarefa 1"
#| tbl-subcap:
#|   - "(a) Tamanho de amostra n = 1000"
#|   - "(b) Tamanho de amostra n = 200"
#| layout-ncol: 2
library(knitr)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
kbl(tab_bayes_2, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
#| label: fig-plot_bayes1
#| fig-cap: "Gráfico da tarefa 1"
#| fig-subcap:
#|   - " Tamanho de amostra n = 200"
#|   - " Tamanho de amostra n = 1000"
#| layout-ncol: 2
segs1 <- calcula_segs_bayes(tab_bayes_1)
segs2 <- calcula_segs_bayes(tab_bayes_2)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs2, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
set.seed(1)
dados <- map2(n, prob_X2, gera_dados, q, beta)
mod <- glm(y~. -x.1 -eta -theta, family = binomial(link = "logit"), data = dados[[1]])
tab_classica_1 <- faz_tab_classica(mod, length(beta))
#| label: tbl-bayes_classica_1
#| tbl-cap: "Resultados da tarefa 2"
#| tbl-subcap:
#|   - "(a) Bayes n = 200"
#|   - "(b) Frequentista n = 200"
#| layout-ncol: 2
library(knitr)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
kbl(tab_classica_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
#| label: fig-plot_bayes_classica_1
#| fig-cap: "Gráfico da tarefa 2"
#| fig-subcap:
#|   - " Bayes n = 200"
#|   - " Frequentista n = 1000"
#| layout-ncol: 2
segs3 <- calcula_segs_classica(tab_classica_1)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs3, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
#| label: fig-plot_bayes2
#| fig-cap: "Gráfico da tarefa 3"
#| fig-subcap:
#|   - " Bayes n = 200 prob(X2 = 1) = 0.5"
#|   - " Bayes n = 200 prob(X2 = 1) = 0.1"
#| layout-ncol: 2
segs4 <- calcula_segs_bayes(tab_bayes_3)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs4, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
set.seed(1)
dados_probit <- gera_dados_probit(200, q, beta)
output_probt <- gera_bayes_probit(200)
samp_probit <- extract(output_probt)
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
#| label: cadeia_4
#| layout-nrow: 3
#| layout-ncol: 3
{ plot( samp_probit$beta[,1], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = 'Traceplot de beta0', col = 'blue')
abline( h = real$beta[1], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,2], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta1',
main = 'Traceplot de beta1', col = 'blue')
abline( h = real$beta[2], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,3], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta2',
main = 'Traceplot de beta2', col = 'blue')
abline( h = real$beta[3], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,4], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta3',
main = 'Traceplot de beta3', col = 'blue')
abline( h = real$beta[4], lwd = 5, col = 'red') }
{ plot( samp_probit$beta[,5], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta4',
main = 'Traceplot de beta4', col = 'blue')
abline( h = real$beta[5], lwd = 5, col = 'red') }
#| label: fig-plot_bayes3
#| fig-cap: "Gráfico da tarefa 4"
#| fig-subcap:
#|   - " Bayes n = 200 logit"
#|   - " Bayes n = 200 probit"
#| layout-ncol: 2
segs5 <- calcula_segs_bayes(tab_bayes_probit)
centipede.plot(segs1, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
centipede.plot(segs5, left.labels = paste0('beta', 0:(q-1)), right.labels = rep("",5), xlab = "")
#| label: tbl-bayes_probit_1
#| tbl-cap: "Resultados da tarefa 4"
#| tbl-subcap:
#|   - "(a) logit"
#|   - "(b) probit"
#| layout-ncol: 2
tab_bayes_probit <- faz_tab_bayes(samp_probit, real, q)
kbl(tab_bayes_1, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(tab_bayes_probit, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down"))
